import * as tslib_1 from "tslib";
/* tslint:disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';
var IonAccordion = /** @class */ (function () {
    function IonAccordion(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonAccordion.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonAccordion = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled', 'mode', 'readonly', 'toggleIcon', 'toggleIconSlot', 'value']
        }),
        Component({
            selector: 'ion-accordion',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled', 'mode', 'readonly', 'toggleIcon', 'toggleIconSlot', 'value']
        })
    ], IonAccordion);
    return IonAccordion;
}());
export { IonAccordion };
var IonAccordionGroup = /** @class */ (function () {
    function IonAccordionGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange']);
    }
    IonAccordionGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonAccordionGroup = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['animated', 'disabled', 'expand', 'mode', 'multiple', 'readonly', 'value']
        }),
        Component({
            selector: 'ion-accordion-group',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['animated', 'disabled', 'expand', 'mode', 'multiple', 'readonly', 'value'],
            outputs: ['ionChange']
        })
    ], IonAccordionGroup);
    return IonAccordionGroup;
}());
export { IonAccordionGroup };
var IonApp = /** @class */ (function () {
    function IonApp(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonApp.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonApp = tslib_1.__decorate([
        Component({
            selector: 'ion-app',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonApp);
    return IonApp;
}());
export { IonApp };
var IonAvatar = /** @class */ (function () {
    function IonAvatar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonAvatar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonAvatar = tslib_1.__decorate([
        Component({
            selector: 'ion-avatar',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonAvatar);
    return IonAvatar;
}());
export { IonAvatar };
var IonBackButton = /** @class */ (function () {
    function IonBackButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonBackButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonBackButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'defaultHref', 'disabled', 'icon', 'mode', 'routerAnimation', 'text', 'type']
        }),
        Component({
            selector: 'ion-back-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'defaultHref', 'disabled', 'icon', 'mode', 'routerAnimation', 'text', 'type']
        })
    ], IonBackButton);
    return IonBackButton;
}());
export { IonBackButton };
var IonBackdrop = /** @class */ (function () {
    function IonBackdrop(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionBackdropTap']);
    }
    IonBackdrop.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonBackdrop = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['stopPropagation', 'tappable', 'visible']
        }),
        Component({
            selector: 'ion-backdrop',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['stopPropagation', 'tappable', 'visible'],
            outputs: ['ionBackdropTap']
        })
    ], IonBackdrop);
    return IonBackdrop;
}());
export { IonBackdrop };
var IonBadge = /** @class */ (function () {
    function IonBadge(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonBadge.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonBadge = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-badge',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonBadge);
    return IonBadge;
}());
export { IonBadge };
var IonBreadcrumb = /** @class */ (function () {
    function IonBreadcrumb(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);
    }
    IonBreadcrumb.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonBreadcrumb = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['active', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'separator', 'target']
        }),
        Component({
            selector: 'ion-breadcrumb',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['active', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'separator', 'target'],
            outputs: ['ionFocus', 'ionBlur']
        })
    ], IonBreadcrumb);
    return IonBreadcrumb;
}());
export { IonBreadcrumb };
var IonBreadcrumbs = /** @class */ (function () {
    function IonBreadcrumbs(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionCollapsedClick']);
    }
    IonBreadcrumbs.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonBreadcrumbs = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'itemsAfterCollapse', 'itemsBeforeCollapse', 'maxItems', 'mode']
        }),
        Component({
            selector: 'ion-breadcrumbs',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'itemsAfterCollapse', 'itemsBeforeCollapse', 'maxItems', 'mode'],
            outputs: ['ionCollapsedClick']
        })
    ], IonBreadcrumbs);
    return IonBreadcrumbs;
}());
export { IonBreadcrumbs };
var IonButton = /** @class */ (function () {
    function IonButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);
    }
    IonButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['buttonType', 'color', 'disabled', 'download', 'expand', 'fill', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'shape', 'size', 'strong', 'target', 'type']
        }),
        Component({
            selector: 'ion-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['buttonType', 'color', 'disabled', 'download', 'expand', 'fill', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'shape', 'size', 'strong', 'target', 'type'],
            outputs: ['ionFocus', 'ionBlur']
        })
    ], IonButton);
    return IonButton;
}());
export { IonButton };
var IonButtons = /** @class */ (function () {
    function IonButtons(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonButtons.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonButtons = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['collapse']
        }),
        Component({
            selector: 'ion-buttons',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['collapse']
        })
    ], IonButtons);
    return IonButtons;
}());
export { IonButtons };
var IonCard = /** @class */ (function () {
    function IonCard(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCard.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCard = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['button', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'target', 'type']
        }),
        Component({
            selector: 'ion-card',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['button', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'target', 'type']
        })
    ], IonCard);
    return IonCard;
}());
export { IonCard };
var IonCardContent = /** @class */ (function () {
    function IonCardContent(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCardContent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCardContent = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['mode']
        }),
        Component({
            selector: 'ion-card-content',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['mode']
        })
    ], IonCardContent);
    return IonCardContent;
}());
export { IonCardContent };
var IonCardHeader = /** @class */ (function () {
    function IonCardHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCardHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCardHeader = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode', 'translucent']
        }),
        Component({
            selector: 'ion-card-header',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode', 'translucent']
        })
    ], IonCardHeader);
    return IonCardHeader;
}());
export { IonCardHeader };
var IonCardSubtitle = /** @class */ (function () {
    function IonCardSubtitle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCardSubtitle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCardSubtitle = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-card-subtitle',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonCardSubtitle);
    return IonCardSubtitle;
}());
export { IonCardSubtitle };
var IonCardTitle = /** @class */ (function () {
    function IonCardTitle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCardTitle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCardTitle = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-card-title',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonCardTitle);
    return IonCardTitle;
}());
export { IonCardTitle };
var IonCheckbox = /** @class */ (function () {
    function IonCheckbox(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);
    }
    IonCheckbox.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCheckbox = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['checked', 'color', 'disabled', 'indeterminate', 'mode', 'name', 'value']
        }),
        Component({
            selector: 'ion-checkbox',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['checked', 'color', 'disabled', 'indeterminate', 'mode', 'name', 'value'],
            outputs: ['ionChange', 'ionFocus', 'ionBlur']
        })
    ], IonCheckbox);
    return IonCheckbox;
}());
export { IonCheckbox };
var IonChip = /** @class */ (function () {
    function IonChip(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonChip.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonChip = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'disabled', 'mode', 'outline']
        }),
        Component({
            selector: 'ion-chip',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'disabled', 'mode', 'outline']
        })
    ], IonChip);
    return IonChip;
}());
export { IonChip };
var IonCol = /** @class */ (function () {
    function IonCol(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonCol.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonCol = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['offset', 'offsetLg', 'offsetMd', 'offsetSm', 'offsetXl', 'offsetXs', 'pull', 'pullLg', 'pullMd', 'pullSm', 'pullXl', 'pullXs', 'push', 'pushLg', 'pushMd', 'pushSm', 'pushXl', 'pushXs', 'size', 'sizeLg', 'sizeMd', 'sizeSm', 'sizeXl', 'sizeXs']
        }),
        Component({
            selector: 'ion-col',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['offset', 'offsetLg', 'offsetMd', 'offsetSm', 'offsetXl', 'offsetXs', 'pull', 'pullLg', 'pullMd', 'pullSm', 'pullXl', 'pullXs', 'push', 'pushLg', 'pushMd', 'pushSm', 'pushXl', 'pushXs', 'size', 'sizeLg', 'sizeMd', 'sizeSm', 'sizeXl', 'sizeXs']
        })
    ], IonCol);
    return IonCol;
}());
export { IonCol };
var IonContent = /** @class */ (function () {
    function IonContent(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionScrollStart', 'ionScroll', 'ionScrollEnd']);
    }
    IonContent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonContent = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'forceOverscroll', 'fullscreen', 'scrollEvents', 'scrollX', 'scrollY'],
            methods: ['getScrollElement', 'scrollToTop', 'scrollToBottom', 'scrollByPoint', 'scrollToPoint']
        }),
        Component({
            selector: 'ion-content',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'forceOverscroll', 'fullscreen', 'scrollEvents', 'scrollX', 'scrollY'],
            outputs: ['ionScrollStart', 'ionScroll', 'ionScrollEnd']
        })
    ], IonContent);
    return IonContent;
}());
export { IonContent };
var IonDatetime = /** @class */ (function () {
    function IonDatetime(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionCancel', 'ionChange', 'ionFocus', 'ionBlur']);
    }
    IonDatetime.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonDatetime = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['cancelText', 'clearText', 'color', 'dayValues', 'disabled', 'doneText', 'firstDayOfWeek', 'hourCycle', 'hourValues', 'locale', 'max', 'min', 'minuteValues', 'mode', 'monthValues', 'name', 'presentation', 'readonly', 'showClearButton', 'showDefaultButtons', 'showDefaultTimeLabel', 'showDefaultTitle', 'size', 'value', 'yearValues'],
            methods: ['confirm', 'reset', 'cancel']
        }),
        Component({
            selector: 'ion-datetime',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['cancelText', 'clearText', 'color', 'dayValues', 'disabled', 'doneText', 'firstDayOfWeek', 'hourCycle', 'hourValues', 'locale', 'max', 'min', 'minuteValues', 'mode', 'monthValues', 'name', 'presentation', 'readonly', 'showClearButton', 'showDefaultButtons', 'showDefaultTimeLabel', 'showDefaultTitle', 'size', 'value', 'yearValues'],
            outputs: ['ionCancel', 'ionChange', 'ionFocus', 'ionBlur']
        })
    ], IonDatetime);
    return IonDatetime;
}());
export { IonDatetime };
var IonFab = /** @class */ (function () {
    function IonFab(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonFab.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonFab = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['activated', 'edge', 'horizontal', 'vertical'],
            methods: ['close']
        }),
        Component({
            selector: 'ion-fab',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['activated', 'edge', 'horizontal', 'vertical']
        })
    ], IonFab);
    return IonFab;
}());
export { IonFab };
var IonFabButton = /** @class */ (function () {
    function IonFabButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);
    }
    IonFabButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonFabButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['activated', 'closeIcon', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'show', 'size', 'target', 'translucent', 'type']
        }),
        Component({
            selector: 'ion-fab-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['activated', 'closeIcon', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'show', 'size', 'target', 'translucent', 'type'],
            outputs: ['ionFocus', 'ionBlur']
        })
    ], IonFabButton);
    return IonFabButton;
}());
export { IonFabButton };
var IonFabList = /** @class */ (function () {
    function IonFabList(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonFabList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonFabList = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['activated', 'side']
        }),
        Component({
            selector: 'ion-fab-list',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['activated', 'side']
        })
    ], IonFabList);
    return IonFabList;
}());
export { IonFabList };
var IonFooter = /** @class */ (function () {
    function IonFooter(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonFooter.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonFooter = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['collapse', 'mode', 'translucent']
        }),
        Component({
            selector: 'ion-footer',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['collapse', 'mode', 'translucent']
        })
    ], IonFooter);
    return IonFooter;
}());
export { IonFooter };
var IonGrid = /** @class */ (function () {
    function IonGrid(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonGrid.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonGrid = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['fixed']
        }),
        Component({
            selector: 'ion-grid',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['fixed']
        })
    ], IonGrid);
    return IonGrid;
}());
export { IonGrid };
var IonHeader = /** @class */ (function () {
    function IonHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonHeader = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['collapse', 'mode', 'translucent']
        }),
        Component({
            selector: 'ion-header',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['collapse', 'mode', 'translucent']
        })
    ], IonHeader);
    return IonHeader;
}());
export { IonHeader };
var IonIcon = /** @class */ (function () {
    function IonIcon(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonIcon.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonIcon = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['ariaHidden', 'ariaLabel', 'color', 'flipRtl', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'sanitize', 'size', 'src']
        }),
        Component({
            selector: 'ion-icon',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['ariaHidden', 'ariaLabel', 'color', 'flipRtl', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'sanitize', 'size', 'src']
        })
    ], IonIcon);
    return IonIcon;
}());
export { IonIcon };
var IonImg = /** @class */ (function () {
    function IonImg(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionImgWillLoad', 'ionImgDidLoad', 'ionError']);
    }
    IonImg.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonImg = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['alt', 'src']
        }),
        Component({
            selector: 'ion-img',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['alt', 'src'],
            outputs: ['ionImgWillLoad', 'ionImgDidLoad', 'ionError']
        })
    ], IonImg);
    return IonImg;
}());
export { IonImg };
var IonInfiniteScroll = /** @class */ (function () {
    function IonInfiniteScroll(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionInfinite']);
    }
    IonInfiniteScroll.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonInfiniteScroll = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled', 'position', 'threshold'],
            methods: ['complete']
        }),
        Component({
            selector: 'ion-infinite-scroll',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled', 'position', 'threshold'],
            outputs: ['ionInfinite']
        })
    ], IonInfiniteScroll);
    return IonInfiniteScroll;
}());
export { IonInfiniteScroll };
var IonInfiniteScrollContent = /** @class */ (function () {
    function IonInfiniteScrollContent(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonInfiniteScrollContent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonInfiniteScrollContent = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['loadingSpinner', 'loadingText']
        }),
        Component({
            selector: 'ion-infinite-scroll-content',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['loadingSpinner', 'loadingText']
        })
    ], IonInfiniteScrollContent);
    return IonInfiniteScrollContent;
}());
export { IonInfiniteScrollContent };
var IonInput = /** @class */ (function () {
    function IonInput(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionInput', 'ionChange', 'ionBlur', 'ionFocus']);
    }
    IonInput.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonInput = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'color', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'mode', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'size', 'spellcheck', 'step', 'type', 'value'],
            methods: ['setFocus', 'getInputElement']
        }),
        Component({
            selector: 'ion-input',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'color', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'mode', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'size', 'spellcheck', 'step', 'type', 'value'],
            outputs: ['ionInput', 'ionChange', 'ionBlur', 'ionFocus']
        })
    ], IonInput);
    return IonInput;
}());
export { IonInput };
var IonItem = /** @class */ (function () {
    function IonItem(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonItem.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItem = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['button', 'color', 'counter', 'detail', 'detailIcon', 'disabled', 'download', 'fill', 'href', 'lines', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'shape', 'target', 'type']
        }),
        Component({
            selector: 'ion-item',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['button', 'color', 'counter', 'detail', 'detailIcon', 'disabled', 'download', 'fill', 'href', 'lines', 'mode', 'rel', 'routerAnimation', 'routerDirection', 'shape', 'target', 'type']
        })
    ], IonItem);
    return IonItem;
}());
export { IonItem };
var IonItemDivider = /** @class */ (function () {
    function IonItemDivider(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonItemDivider.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItemDivider = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode', 'sticky']
        }),
        Component({
            selector: 'ion-item-divider',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode', 'sticky']
        })
    ], IonItemDivider);
    return IonItemDivider;
}());
export { IonItemDivider };
var IonItemGroup = /** @class */ (function () {
    function IonItemGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonItemGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItemGroup = tslib_1.__decorate([
        Component({
            selector: 'ion-item-group',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonItemGroup);
    return IonItemGroup;
}());
export { IonItemGroup };
var IonItemOption = /** @class */ (function () {
    function IonItemOption(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonItemOption.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItemOption = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'disabled', 'download', 'expandable', 'href', 'mode', 'rel', 'target', 'type']
        }),
        Component({
            selector: 'ion-item-option',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'disabled', 'download', 'expandable', 'href', 'mode', 'rel', 'target', 'type']
        })
    ], IonItemOption);
    return IonItemOption;
}());
export { IonItemOption };
var IonItemOptions = /** @class */ (function () {
    function IonItemOptions(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionSwipe']);
    }
    IonItemOptions.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItemOptions = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['side']
        }),
        Component({
            selector: 'ion-item-options',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['side'],
            outputs: ['ionSwipe']
        })
    ], IonItemOptions);
    return IonItemOptions;
}());
export { IonItemOptions };
var IonItemSliding = /** @class */ (function () {
    function IonItemSliding(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionDrag']);
    }
    IonItemSliding.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonItemSliding = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled'],
            methods: ['getOpenAmount', 'getSlidingRatio', 'open', 'close', 'closeOpened']
        }),
        Component({
            selector: 'ion-item-sliding',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled'],
            outputs: ['ionDrag']
        })
    ], IonItemSliding);
    return IonItemSliding;
}());
export { IonItemSliding };
var IonLabel = /** @class */ (function () {
    function IonLabel(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonLabel.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonLabel = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode', 'position']
        }),
        Component({
            selector: 'ion-label',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode', 'position']
        })
    ], IonLabel);
    return IonLabel;
}());
export { IonLabel };
var IonList = /** @class */ (function () {
    function IonList(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonList.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonList = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['inset', 'lines', 'mode'],
            methods: ['closeSlidingItems']
        }),
        Component({
            selector: 'ion-list',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['inset', 'lines', 'mode']
        })
    ], IonList);
    return IonList;
}());
export { IonList };
var IonListHeader = /** @class */ (function () {
    function IonListHeader(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonListHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonListHeader = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'lines', 'mode']
        }),
        Component({
            selector: 'ion-list-header',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'lines', 'mode']
        })
    ], IonListHeader);
    return IonListHeader;
}());
export { IonListHeader };
var IonMenu = /** @class */ (function () {
    function IonMenu(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose']);
    }
    IonMenu.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonMenu = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['contentId', 'disabled', 'maxEdgeStart', 'menuId', 'side', 'swipeGesture', 'type'],
            methods: ['isOpen', 'isActive', 'open', 'close', 'toggle', 'setOpen']
        }),
        Component({
            selector: 'ion-menu',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['contentId', 'disabled', 'maxEdgeStart', 'menuId', 'side', 'swipeGesture', 'type'],
            outputs: ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose']
        })
    ], IonMenu);
    return IonMenu;
}());
export { IonMenu };
var IonMenuButton = /** @class */ (function () {
    function IonMenuButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonMenuButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonMenuButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['autoHide', 'color', 'disabled', 'menu', 'mode', 'type']
        }),
        Component({
            selector: 'ion-menu-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['autoHide', 'color', 'disabled', 'menu', 'mode', 'type']
        })
    ], IonMenuButton);
    return IonMenuButton;
}());
export { IonMenuButton };
var IonMenuToggle = /** @class */ (function () {
    function IonMenuToggle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonMenuToggle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonMenuToggle = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['autoHide', 'menu']
        }),
        Component({
            selector: 'ion-menu-toggle',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['autoHide', 'menu']
        })
    ], IonMenuToggle);
    return IonMenuToggle;
}());
export { IonMenuToggle };
var IonNav = /** @class */ (function () {
    function IonNav(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionNavWillChange', 'ionNavDidChange']);
    }
    IonNav.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonNav = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['animated', 'animation', 'root', 'rootParams', 'swipeGesture'],
            methods: ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']
        }),
        Component({
            selector: 'ion-nav',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['animated', 'animation', 'root', 'rootParams', 'swipeGesture'],
            outputs: ['ionNavWillChange', 'ionNavDidChange']
        })
    ], IonNav);
    return IonNav;
}());
export { IonNav };
var IonNavLink = /** @class */ (function () {
    function IonNavLink(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonNavLink.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonNavLink = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['component', 'componentProps', 'routerAnimation', 'routerDirection']
        }),
        Component({
            selector: 'ion-nav-link',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['component', 'componentProps', 'routerAnimation', 'routerDirection']
        })
    ], IonNavLink);
    return IonNavLink;
}());
export { IonNavLink };
var IonNote = /** @class */ (function () {
    function IonNote(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonNote.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonNote = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-note',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonNote);
    return IonNote;
}());
export { IonNote };
var IonProgressBar = /** @class */ (function () {
    function IonProgressBar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonProgressBar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonProgressBar = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['buffer', 'color', 'mode', 'reversed', 'type', 'value']
        }),
        Component({
            selector: 'ion-progress-bar',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['buffer', 'color', 'mode', 'reversed', 'type', 'value']
        })
    ], IonProgressBar);
    return IonProgressBar;
}());
export { IonProgressBar };
var IonRadio = /** @class */ (function () {
    function IonRadio(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);
    }
    IonRadio.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRadio = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'disabled', 'mode', 'name', 'value']
        }),
        Component({
            selector: 'ion-radio',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'disabled', 'mode', 'name', 'value'],
            outputs: ['ionFocus', 'ionBlur']
        })
    ], IonRadio);
    return IonRadio;
}());
export { IonRadio };
var IonRadioGroup = /** @class */ (function () {
    function IonRadioGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange']);
    }
    IonRadioGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRadioGroup = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['allowEmptySelection', 'name', 'value']
        }),
        Component({
            selector: 'ion-radio-group',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['allowEmptySelection', 'name', 'value'],
            outputs: ['ionChange']
        })
    ], IonRadioGroup);
    return IonRadioGroup;
}());
export { IonRadioGroup };
var IonRange = /** @class */ (function () {
    function IonRange(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);
    }
    IonRange.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRange = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'debounce', 'disabled', 'dualKnobs', 'max', 'min', 'mode', 'name', 'pin', 'pinFormatter', 'snaps', 'step', 'ticks', 'value']
        }),
        Component({
            selector: 'ion-range',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'debounce', 'disabled', 'dualKnobs', 'max', 'min', 'mode', 'name', 'pin', 'pinFormatter', 'snaps', 'step', 'ticks', 'value'],
            outputs: ['ionChange', 'ionFocus', 'ionBlur']
        })
    ], IonRange);
    return IonRange;
}());
export { IonRange };
var IonRefresher = /** @class */ (function () {
    function IonRefresher(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionRefresh', 'ionPull', 'ionStart']);
    }
    IonRefresher.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRefresher = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['closeDuration', 'disabled', 'pullFactor', 'pullMax', 'pullMin', 'snapbackDuration'],
            methods: ['complete', 'cancel', 'getProgress']
        }),
        Component({
            selector: 'ion-refresher',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['closeDuration', 'disabled', 'pullFactor', 'pullMax', 'pullMin', 'snapbackDuration'],
            outputs: ['ionRefresh', 'ionPull', 'ionStart']
        })
    ], IonRefresher);
    return IonRefresher;
}());
export { IonRefresher };
var IonRefresherContent = /** @class */ (function () {
    function IonRefresherContent(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonRefresherContent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRefresherContent = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']
        }),
        Component({
            selector: 'ion-refresher-content',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']
        })
    ], IonRefresherContent);
    return IonRefresherContent;
}());
export { IonRefresherContent };
var IonReorder = /** @class */ (function () {
    function IonReorder(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonReorder.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonReorder = tslib_1.__decorate([
        Component({
            selector: 'ion-reorder',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonReorder);
    return IonReorder;
}());
export { IonReorder };
var IonReorderGroup = /** @class */ (function () {
    function IonReorderGroup(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionItemReorder']);
    }
    IonReorderGroup.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonReorderGroup = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled'],
            methods: ['complete']
        }),
        Component({
            selector: 'ion-reorder-group',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled'],
            outputs: ['ionItemReorder']
        })
    ], IonReorderGroup);
    return IonReorderGroup;
}());
export { IonReorderGroup };
var IonRippleEffect = /** @class */ (function () {
    function IonRippleEffect(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonRippleEffect.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRippleEffect = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['type'],
            methods: ['addRipple']
        }),
        Component({
            selector: 'ion-ripple-effect',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['type']
        })
    ], IonRippleEffect);
    return IonRippleEffect;
}());
export { IonRippleEffect };
var IonRow = /** @class */ (function () {
    function IonRow(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonRow.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonRow = tslib_1.__decorate([
        Component({
            selector: 'ion-row',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonRow);
    return IonRow;
}());
export { IonRow };
var IonSearchbar = /** @class */ (function () {
    function IonSearchbar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']);
    }
    IonSearchbar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSearchbar = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'color', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'mode', 'placeholder', 'searchIcon', 'showCancelButton', 'showClearButton', 'spellcheck', 'type', 'value'],
            methods: ['setFocus', 'getInputElement']
        }),
        Component({
            selector: 'ion-searchbar',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'color', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'mode', 'placeholder', 'searchIcon', 'showCancelButton', 'showClearButton', 'spellcheck', 'type', 'value'],
            outputs: ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']
        })
    ], IonSearchbar);
    return IonSearchbar;
}());
export { IonSearchbar };
var IonSegment = /** @class */ (function () {
    function IonSegment(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange']);
    }
    IonSegment.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSegment = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'disabled', 'mode', 'scrollable', 'selectOnFocus', 'swipeGesture', 'value']
        }),
        Component({
            selector: 'ion-segment',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'disabled', 'mode', 'scrollable', 'selectOnFocus', 'swipeGesture', 'value'],
            outputs: ['ionChange']
        })
    ], IonSegment);
    return IonSegment;
}());
export { IonSegment };
var IonSegmentButton = /** @class */ (function () {
    function IonSegmentButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonSegmentButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSegmentButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled', 'layout', 'mode', 'type', 'value']
        }),
        Component({
            selector: 'ion-segment-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled', 'layout', 'mode', 'type', 'value']
        })
    ], IonSegmentButton);
    return IonSegmentButton;
}());
export { IonSegmentButton };
var IonSelect = /** @class */ (function () {
    function IonSelect(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur']);
    }
    IonSelect.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSelect = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['cancelText', 'compareWith', 'disabled', 'interface', 'interfaceOptions', 'mode', 'multiple', 'name', 'okText', 'placeholder', 'selectedText', 'value'],
            methods: ['open']
        }),
        Component({
            selector: 'ion-select',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['cancelText', 'compareWith', 'disabled', 'interface', 'interfaceOptions', 'mode', 'multiple', 'name', 'okText', 'placeholder', 'selectedText', 'value'],
            outputs: ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur']
        })
    ], IonSelect);
    return IonSelect;
}());
export { IonSelect };
var IonSelectOption = /** @class */ (function () {
    function IonSelectOption(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonSelectOption.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSelectOption = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled', 'value']
        }),
        Component({
            selector: 'ion-select-option',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled', 'value']
        })
    ], IonSelectOption);
    return IonSelectOption;
}());
export { IonSelectOption };
var IonSkeletonText = /** @class */ (function () {
    function IonSkeletonText(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonSkeletonText.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSkeletonText = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['animated']
        }),
        Component({
            selector: 'ion-skeleton-text',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['animated']
        })
    ], IonSkeletonText);
    return IonSkeletonText;
}());
export { IonSkeletonText };
var IonSlide = /** @class */ (function () {
    function IonSlide(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonSlide.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSlide = tslib_1.__decorate([
        Component({
            selector: 'ion-slide',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonSlide);
    return IonSlide;
}());
export { IonSlide };
var IonSlides = /** @class */ (function () {
    function IonSlides(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']);
    }
    IonSlides.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSlides = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['mode', 'options', 'pager', 'scrollbar'],
            methods: ['update', 'updateAutoHeight', 'slideTo', 'slideNext', 'slidePrev', 'getActiveIndex', 'getPreviousIndex', 'length', 'isEnd', 'isBeginning', 'startAutoplay', 'stopAutoplay', 'lockSwipeToNext', 'lockSwipeToPrev', 'lockSwipes', 'getSwiper']
        }),
        Component({
            selector: 'ion-slides',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['mode', 'options', 'pager', 'scrollbar'],
            outputs: ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']
        })
    ], IonSlides);
    return IonSlides;
}());
export { IonSlides };
var IonSpinner = /** @class */ (function () {
    function IonSpinner(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonSpinner.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSpinner = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'duration', 'name', 'paused']
        }),
        Component({
            selector: 'ion-spinner',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'duration', 'name', 'paused']
        })
    ], IonSpinner);
    return IonSpinner;
}());
export { IonSpinner };
var IonSplitPane = /** @class */ (function () {
    function IonSplitPane(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionSplitPaneVisible']);
    }
    IonSplitPane.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonSplitPane = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['contentId', 'disabled', 'when']
        }),
        Component({
            selector: 'ion-split-pane',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['contentId', 'disabled', 'when'],
            outputs: ['ionSplitPaneVisible']
        })
    ], IonSplitPane);
    return IonSplitPane;
}());
export { IonSplitPane };
var IonTabBar = /** @class */ (function () {
    function IonTabBar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonTabBar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonTabBar = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode', 'selectedTab', 'translucent']
        }),
        Component({
            selector: 'ion-tab-bar',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode', 'selectedTab', 'translucent']
        })
    ], IonTabBar);
    return IonTabBar;
}());
export { IonTabBar };
var IonTabButton = /** @class */ (function () {
    function IonTabButton(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonTabButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonTabButton = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['disabled', 'download', 'href', 'layout', 'mode', 'rel', 'selected', 'tab', 'target']
        }),
        Component({
            selector: 'ion-tab-button',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['disabled', 'download', 'href', 'layout', 'mode', 'rel', 'selected', 'tab', 'target']
        })
    ], IonTabButton);
    return IonTabButton;
}());
export { IonTabButton };
var IonText = /** @class */ (function () {
    function IonText(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonText.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonText = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-text',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonText);
    return IonText;
}());
export { IonText };
var IonTextarea = /** @class */ (function () {
    function IonTextarea(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange', 'ionInput', 'ionBlur', 'ionFocus']);
    }
    IonTextarea.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonTextarea = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['autoGrow', 'autocapitalize', 'autofocus', 'clearOnEdit', 'color', 'cols', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'maxlength', 'minlength', 'mode', 'name', 'placeholder', 'readonly', 'required', 'rows', 'spellcheck', 'value', 'wrap'],
            methods: ['setFocus', 'getInputElement']
        }),
        Component({
            selector: 'ion-textarea',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['autoGrow', 'autocapitalize', 'autofocus', 'clearOnEdit', 'color', 'cols', 'debounce', 'disabled', 'enterkeyhint', 'inputmode', 'maxlength', 'minlength', 'mode', 'name', 'placeholder', 'readonly', 'required', 'rows', 'spellcheck', 'value', 'wrap'],
            outputs: ['ionChange', 'ionInput', 'ionBlur', 'ionFocus']
        })
    ], IonTextarea);
    return IonTextarea;
}());
export { IonTextarea };
var IonThumbnail = /** @class */ (function () {
    function IonThumbnail(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonThumbnail.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonThumbnail = tslib_1.__decorate([
        Component({
            selector: 'ion-thumbnail',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>'
        })
    ], IonThumbnail);
    return IonThumbnail;
}());
export { IonThumbnail };
var IonTitle = /** @class */ (function () {
    function IonTitle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonTitle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonTitle = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'size']
        }),
        Component({
            selector: 'ion-title',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'size']
        })
    ], IonTitle);
    return IonTitle;
}());
export { IonTitle };
var IonToggle = /** @class */ (function () {
    function IonToggle(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);
    }
    IonToggle.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonToggle = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['checked', 'color', 'disabled', 'mode', 'name', 'value']
        }),
        Component({
            selector: 'ion-toggle',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['checked', 'color', 'disabled', 'mode', 'name', 'value'],
            outputs: ['ionChange', 'ionFocus', 'ionBlur']
        })
    ], IonToggle);
    return IonToggle;
}());
export { IonToggle };
var IonToolbar = /** @class */ (function () {
    function IonToolbar(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
    IonToolbar.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IonToolbar = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['color', 'mode']
        }),
        Component({
            selector: 'ion-toolbar',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: '<ng-content></ng-content>',
            inputs: ['color', 'mode']
        })
    ], IonToolbar);
    return IonToolbar;
}());
export { IonToolbar };
//# sourceMappingURL=data:application/json;base64,