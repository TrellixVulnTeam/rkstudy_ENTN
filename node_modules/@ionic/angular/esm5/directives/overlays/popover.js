import * as tslib_1 from "tslib";
/* eslint-disable */
/* tslint:disable */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, NgZone, TemplateRef } from "@angular/core";
import { ProxyCmp, proxyOutputs } from "../angular-component-lib/utils";
var IonPopover = /** @class */ (function () {
    function IonPopover(c, r, z) {
        var _this = this;
        this.z = z;
        this.isCmpOpen = false;
        c.detach();
        this.el = r.nativeElement;
        this.el.addEventListener('willPresent', function () {
            _this.isCmpOpen = true;
            c.detectChanges();
        });
        this.el.addEventListener('didDismiss', function () {
            _this.isCmpOpen = false;
            c.detectChanges();
        });
        proxyOutputs(this, this.el, ["ionPopoverDidPresent", "ionPopoverWillPresent", "ionPopoverWillDismiss", "ionPopoverDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
    }
    IonPopover.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        ContentChild(TemplateRef, { static: false })
    ], IonPopover.prototype, "template", void 0);
    IonPopover = tslib_1.__decorate([
        ProxyCmp({ inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"], "methods": ["present", "dismiss", "onDidDismiss", "onWillDismiss"] }),
        Component({ selector: "ion-popover", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngTemplateOutlet]=\"template\" *ngIf=\"isCmpOpen\"></ng-container>", inputs: ["alignment", "animated", "arrow", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size"] })
    ], IonPopover);
    return IonPopover;
}());
export { IonPopover };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb25pYy9hbmd1bGFyLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9vdmVybGF5cy9wb3BvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSixPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBTXhFO0lBY0Usb0JBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFwRSxpQkFjQztRQWQwRCxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBSHBFLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFJekIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRTFCLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFO1lBQ3RDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFO1lBQ3JDLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDNUwsQ0FBQzs7Z0JBZGMsaUJBQWlCO2dCQUFLLFVBQVU7Z0JBQWUsTUFBTTs7SUFidEI7UUFBN0MsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztnREFBNEI7SUFEOUQsVUFBVTtRQUZ0QixRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM5VSxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLG1GQUErRSxFQUFFLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDO09BQ3BhLFVBQVUsQ0E2QnRCO0lBQUQsaUJBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUHJveHlDbXAsIHByb3h5T3V0cHV0cyB9IGZyb20gXCIuLi9hbmd1bGFyLWNvbXBvbmVudC1saWIvdXRpbHNcIjtcbmltcG9ydCB7IENvbXBvbmVudHMgfSBmcm9tIFwiQGlvbmljL2NvcmVcIjtcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJb25Qb3BvdmVyIGV4dGVuZHMgQ29tcG9uZW50cy5Jb25Qb3BvdmVyIHtcbn1cbkBQcm94eUNtcCh7IGlucHV0czogW1wiYWxpZ25tZW50XCIsIFwiYW5pbWF0ZWRcIiwgXCJhcnJvd1wiLCBcImJhY2tkcm9wRGlzbWlzc1wiLCBcImNzc0NsYXNzXCIsIFwiZGlzbWlzc09uU2VsZWN0XCIsIFwiZW50ZXJBbmltYXRpb25cIiwgXCJldmVudFwiLCBcImlzT3BlblwiLCBcImtleWJvYXJkQ2xvc2VcIiwgXCJsZWF2ZUFuaW1hdGlvblwiLCBcIm1vZGVcIiwgXCJzaG93QmFja2Ryb3BcIiwgXCJ0cmFuc2x1Y2VudFwiLCBcInRyaWdnZXJcIiwgXCJ0cmlnZ2VyQWN0aW9uXCIsIFwicmVmZXJlbmNlXCIsIFwic2l6ZVwiXSwgXCJtZXRob2RzXCI6IFtcInByZXNlbnRcIiwgXCJkaXNtaXNzXCIsIFwib25EaWREaXNtaXNzXCIsIFwib25XaWxsRGlzbWlzc1wiXSB9KVxuQENvbXBvbmVudCh7IHNlbGVjdG9yOiBcImlvbi1wb3BvdmVyXCIsIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLCB0ZW1wbGF0ZTogYDxuZy1jb250YWluZXIgW25nVGVtcGxhdGVPdXRsZXRdPVwidGVtcGxhdGVcIiAqbmdJZj1cImlzQ21wT3BlblwiPjwvbmctY29udGFpbmVyPmAsIGlucHV0czogW1wiYWxpZ25tZW50XCIsIFwiYW5pbWF0ZWRcIiwgXCJhcnJvd1wiLCBcImJhY2tkcm9wRGlzbWlzc1wiLCBcImNzc0NsYXNzXCIsIFwiZGlzbWlzc09uU2VsZWN0XCIsIFwiZW50ZXJBbmltYXRpb25cIiwgXCJldmVudFwiLCBcImlzT3BlblwiLCBcImtleWJvYXJkQ2xvc2VcIiwgXCJsZWF2ZUFuaW1hdGlvblwiLCBcIm1vZGVcIiwgXCJzaG93QmFja2Ryb3BcIiwgXCJ0cmFuc2x1Y2VudFwiLCBcInRyaWdnZXJcIiwgXCJ0cmlnZ2VyQWN0aW9uXCIsIFwicmVmZXJlbmNlXCIsIFwic2l6ZVwiXSB9KVxuZXhwb3J0IGNsYXNzIElvblBvcG92ZXIge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogZmFsc2UgfSkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgaW9uUG9wb3ZlckRpZFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpb25Qb3BvdmVyV2lsbFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpb25Qb3BvdmVyV2lsbERpc21pc3MhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpb25Qb3BvdmVyRGlkRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGRpZFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICB3aWxsUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIHdpbGxEaXNtaXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgZGlkRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlzQ21wT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd3aWxsUHJlc2VudCcsICgpID0+IHtcbiAgICAgIHRoaXMuaXNDbXBPcGVuID0gdHJ1ZTtcbiAgICAgIGMuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0pO1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignZGlkRGlzbWlzcycsICgpID0+IHtcbiAgICAgIHRoaXMuaXNDbXBPcGVuID0gZmFsc2U7XG4gICAgICBjLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcblxuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbXCJpb25Qb3BvdmVyRGlkUHJlc2VudFwiLCBcImlvblBvcG92ZXJXaWxsUHJlc2VudFwiLCBcImlvblBvcG92ZXJXaWxsRGlzbWlzc1wiLCBcImlvblBvcG92ZXJEaWREaXNtaXNzXCIsIFwiZGlkUHJlc2VudFwiLCBcIndpbGxQcmVzZW50XCIsIFwid2lsbERpc21pc3NcIiwgXCJkaWREaXNtaXNzXCJdKTtcbiAgfVxufVxuIl19