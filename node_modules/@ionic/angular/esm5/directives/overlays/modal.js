import * as tslib_1 from "tslib";
/* eslint-disable */
/* tslint:disable */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, NgZone, TemplateRef } from "@angular/core";
import { ProxyCmp, proxyOutputs } from "../angular-component-lib/utils";
var IonModal = /** @class */ (function () {
    function IonModal(c, r, z) {
        var _this = this;
        this.z = z;
        this.isCmpOpen = false;
        c.detach();
        this.el = r.nativeElement;
        this.el.addEventListener('willPresent', function () {
            _this.isCmpOpen = true;
            c.detectChanges();
        });
        this.el.addEventListener('didDismiss', function () {
            _this.isCmpOpen = false;
            c.detectChanges();
        });
        proxyOutputs(this, this.el, ["ionModalDidPresent", "ionModalWillPresent", "ionModalWillDismiss", "ionModalDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
    }
    IonModal.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    tslib_1.__decorate([
        ContentChild(TemplateRef, { static: false })
    ], IonModal.prototype, "template", void 0);
    IonModal = tslib_1.__decorate([
        ProxyCmp({ inputs: ["animated", "backdropBreakpoint", "backdropDismiss", "breakpoints", "cssClass", "enterAnimation", "event", "handle", "initialBreakpoint", "isOpen", "keyboardClose", "leaveAnimation", "mode", "presentingElement", "showBackdrop", "swipeToClose", "translucent", "trigger"], "methods": ["present", "dismiss", "onDidDismiss", "onWillDismiss"] }),
        Component({ selector: "ion-modal", changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngTemplateOutlet]=\"template\" *ngIf=\"isCmpOpen\"></ng-container>", inputs: ["animated", "backdropBreakpoint", "backdropDismiss", "breakpoints", "cssClass", "enterAnimation", "event", "handle", "initialBreakpoint", "isOpen", "keyboardClose", "leaveAnimation", "mode", "presentingElement", "showBackdrop", "swipeToClose", "translucent", "trigger"] })
    ], IonModal);
    return IonModal;
}());
export { IonModal };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9uaWMvYW5ndWxhci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvb3ZlcmxheXMvbW9kYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25KLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFNeEU7SUFjRSxrQkFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQXBFLGlCQWNDO1FBZDBELE1BQUMsR0FBRCxDQUFDLENBQVE7UUFIcEUsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUl6QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7WUFDdEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUU7WUFDckMsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNwTCxDQUFDOztnQkFkYyxpQkFBaUI7Z0JBQUssVUFBVTtnQkFBZSxNQUFNOztJQWJ0QjtRQUE3QyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDOzhDQUE0QjtJQUQ5RCxRQUFRO1FBRnBCLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUN4VyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLG1GQUErRSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQztPQUM1YixRQUFRLENBNkJwQjtJQUFELGVBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTdCWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgVGVtcGxhdGVSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUHJveHlDbXAsIHByb3h5T3V0cHV0cyB9IGZyb20gXCIuLi9hbmd1bGFyLWNvbXBvbmVudC1saWIvdXRpbHNcIjtcbmltcG9ydCB7IENvbXBvbmVudHMgfSBmcm9tIFwiQGlvbmljL2NvcmVcIjtcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJb25Nb2RhbCBleHRlbmRzIENvbXBvbmVudHMuSW9uTW9kYWwge1xufVxuQFByb3h5Q21wKHsgaW5wdXRzOiBbXCJhbmltYXRlZFwiLCBcImJhY2tkcm9wQnJlYWtwb2ludFwiLCBcImJhY2tkcm9wRGlzbWlzc1wiLCBcImJyZWFrcG9pbnRzXCIsIFwiY3NzQ2xhc3NcIiwgXCJlbnRlckFuaW1hdGlvblwiLCBcImV2ZW50XCIsIFwiaGFuZGxlXCIsIFwiaW5pdGlhbEJyZWFrcG9pbnRcIiwgXCJpc09wZW5cIiwgXCJrZXlib2FyZENsb3NlXCIsIFwibGVhdmVBbmltYXRpb25cIiwgXCJtb2RlXCIsIFwicHJlc2VudGluZ0VsZW1lbnRcIiwgXCJzaG93QmFja2Ryb3BcIiwgXCJzd2lwZVRvQ2xvc2VcIiwgXCJ0cmFuc2x1Y2VudFwiLCBcInRyaWdnZXJcIl0sIFwibWV0aG9kc1wiOiBbXCJwcmVzZW50XCIsIFwiZGlzbWlzc1wiLCBcIm9uRGlkRGlzbWlzc1wiLCBcIm9uV2lsbERpc21pc3NcIl0gfSlcbkBDb21wb25lbnQoeyBzZWxlY3RvcjogXCJpb24tbW9kYWxcIiwgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsIHRlbXBsYXRlOiBgPG5nLWNvbnRhaW5lciBbbmdUZW1wbGF0ZU91dGxldF09XCJ0ZW1wbGF0ZVwiICpuZ0lmPVwiaXNDbXBPcGVuXCI+PC9uZy1jb250YWluZXI+YCwgaW5wdXRzOiBbXCJhbmltYXRlZFwiLCBcImJhY2tkcm9wQnJlYWtwb2ludFwiLCBcImJhY2tkcm9wRGlzbWlzc1wiLCBcImJyZWFrcG9pbnRzXCIsIFwiY3NzQ2xhc3NcIiwgXCJlbnRlckFuaW1hdGlvblwiLCBcImV2ZW50XCIsIFwiaGFuZGxlXCIsIFwiaW5pdGlhbEJyZWFrcG9pbnRcIiwgXCJpc09wZW5cIiwgXCJrZXlib2FyZENsb3NlXCIsIFwibGVhdmVBbmltYXRpb25cIiwgXCJtb2RlXCIsIFwicHJlc2VudGluZ0VsZW1lbnRcIiwgXCJzaG93QmFja2Ryb3BcIiwgXCJzd2lwZVRvQ2xvc2VcIiwgXCJ0cmFuc2x1Y2VudFwiLCBcInRyaWdnZXJcIl0gfSlcbmV4cG9ydCBjbGFzcyBJb25Nb2RhbCB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYsIHsgc3RhdGljOiBmYWxzZSB9KSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBpb25Nb2RhbERpZFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICBpb25Nb2RhbFdpbGxQcmVzZW50ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgaW9uTW9kYWxXaWxsRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlvbk1vZGFsRGlkRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGRpZFByZXNlbnQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ+O1xuICB3aWxsUHJlc2VudCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIHdpbGxEaXNtaXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PjtcbiAgZGlkRGlzbWlzcyE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD47XG4gIGlzQ21wT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd3aWxsUHJlc2VudCcsICgpID0+IHtcbiAgICAgIHRoaXMuaXNDbXBPcGVuID0gdHJ1ZTtcbiAgICAgIGMuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0pO1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignZGlkRGlzbWlzcycsICgpID0+IHtcbiAgICAgIHRoaXMuaXNDbXBPcGVuID0gZmFsc2U7XG4gICAgICBjLmRldGVjdENoYW5nZXMoKTtcbiAgICB9KTtcblxuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbXCJpb25Nb2RhbERpZFByZXNlbnRcIiwgXCJpb25Nb2RhbFdpbGxQcmVzZW50XCIsIFwiaW9uTW9kYWxXaWxsRGlzbWlzc1wiLCBcImlvbk1vZGFsRGlkRGlzbWlzc1wiLCBcImRpZFByZXNlbnRcIiwgXCJ3aWxsUHJlc2VudFwiLCBcIndpbGxEaXNtaXNzXCIsIFwiZGlkRGlzbWlzc1wiXSk7XG4gIH1cbn1cbiJdfQ==