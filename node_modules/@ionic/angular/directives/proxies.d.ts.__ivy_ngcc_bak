import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Components } from '@ionic/core';
export declare interface IonAccordion extends Components.IonAccordion {
}
export declare class IonAccordion {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { AccordionGroupChangeEventDetail as IAccordionGroupAccordionGroupChangeEventDetail } from '@ionic/core';
export declare interface IonAccordionGroup extends Components.IonAccordionGroup {
}
export declare class IonAccordionGroup {
    protected z: NgZone;
    /** Emitted when the value property has changed. */
    ionChange: EventEmitter<CustomEvent<IAccordionGroupAccordionGroupChangeEventDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonApp extends Components.IonApp {
}
export declare class IonApp {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonAvatar extends Components.IonAvatar {
}
export declare class IonAvatar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonBackButton extends Components.IonBackButton {
}
export declare class IonBackButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonBackdrop extends Components.IonBackdrop {
}
export declare class IonBackdrop {
    protected z: NgZone;
    /** Emitted when the backdrop is tapped. */
    ionBackdropTap: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonBadge extends Components.IonBadge {
}
export declare class IonBadge {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonBreadcrumb extends Components.IonBreadcrumb {
}
export declare class IonBreadcrumb {
    protected z: NgZone;
    /** Emitted when the breadcrumb has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the breadcrumb loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { BreadcrumbCollapsedClickEventDetail as IBreadcrumbsBreadcrumbCollapsedClickEventDetail } from '@ionic/core';
export declare interface IonBreadcrumbs extends Components.IonBreadcrumbs {
}
export declare class IonBreadcrumbs {
    protected z: NgZone;
    /** Emitted when the collapsed indicator is clicked on. */
    ionCollapsedClick: EventEmitter<CustomEvent<IBreadcrumbsBreadcrumbCollapsedClickEventDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonButton extends Components.IonButton {
}
export declare class IonButton {
    protected z: NgZone;
    /** Emitted when the button has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the button loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonButtons extends Components.IonButtons {
}
export declare class IonButtons {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCard extends Components.IonCard {
}
export declare class IonCard {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCardContent extends Components.IonCardContent {
}
export declare class IonCardContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCardHeader extends Components.IonCardHeader {
}
export declare class IonCardHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCardSubtitle extends Components.IonCardSubtitle {
}
export declare class IonCardSubtitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCardTitle extends Components.IonCardTitle {
}
export declare class IonCardTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { CheckboxChangeEventDetail as ICheckboxCheckboxChangeEventDetail } from '@ionic/core';
export declare interface IonCheckbox extends Components.IonCheckbox {
}
export declare class IonCheckbox {
    protected z: NgZone;
    /** Emitted when the checked property has changed. */
    ionChange: EventEmitter<CustomEvent<ICheckboxCheckboxChangeEventDetail>>;
    /** Emitted when the checkbox has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the checkbox loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonChip extends Components.IonChip {
}
export declare class IonChip {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonCol extends Components.IonCol {
}
export declare class IonCol {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { ScrollBaseDetail as IContentScrollBaseDetail } from '@ionic/core';
import { ScrollDetail as IContentScrollDetail } from '@ionic/core';
export declare interface IonContent extends Components.IonContent {
}
export declare class IonContent {
    protected z: NgZone;
    /** Emitted when the scroll has started. */
    ionScrollStart: EventEmitter<CustomEvent<IContentScrollBaseDetail>>;
    /** Emitted while scrolling. This event is disabled by default.
  Look at the property: `scrollEvents` */
    ionScroll: EventEmitter<CustomEvent<IContentScrollDetail>>;
    /** Emitted when the scroll has ended. */
    ionScrollEnd: EventEmitter<CustomEvent<IContentScrollBaseDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { DatetimeChangeEventDetail as IDatetimeDatetimeChangeEventDetail } from '@ionic/core';
export declare interface IonDatetime extends Components.IonDatetime {
}
export declare class IonDatetime {
    protected z: NgZone;
    /** Emitted when the datetime selection was cancelled. */
    ionCancel: EventEmitter<CustomEvent<void>>;
    /** Emitted when the value (selected date) has changed. */
    ionChange: EventEmitter<CustomEvent<IDatetimeDatetimeChangeEventDetail>>;
    /** Emitted when the datetime has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the datetime loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonFab extends Components.IonFab {
}
export declare class IonFab {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonFabButton extends Components.IonFabButton {
}
export declare class IonFabButton {
    protected z: NgZone;
    /** Emitted when the button has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the button loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonFabList extends Components.IonFabList {
}
export declare class IonFabList {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonFooter extends Components.IonFooter {
}
export declare class IonFooter {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonGrid extends Components.IonGrid {
}
export declare class IonGrid {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonHeader extends Components.IonHeader {
}
export declare class IonHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonIcon extends Components.IonIcon {
}
export declare class IonIcon {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonImg extends Components.IonImg {
}
export declare class IonImg {
    protected z: NgZone;
    /** Emitted when the img src has been set */
    ionImgWillLoad: EventEmitter<CustomEvent<void>>;
    /** Emitted when the image has finished loading */
    ionImgDidLoad: EventEmitter<CustomEvent<void>>;
    /** Emitted when the img fails to load */
    ionError: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonInfiniteScroll extends Components.IonInfiniteScroll {
}
export declare class IonInfiniteScroll {
    protected z: NgZone;
    /** Emitted when the scroll reaches
  the threshold distance. From within your infinite handler,
  you must call the infinite scroll's `complete()` method when
  your async operation has completed. */
    ionInfinite: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonInfiniteScrollContent extends Components.IonInfiniteScrollContent {
}
export declare class IonInfiniteScrollContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { InputChangeEventDetail as IInputInputChangeEventDetail } from '@ionic/core';
export declare interface IonInput extends Components.IonInput {
}
export declare class IonInput {
    protected z: NgZone;
    /** Emitted when a keyboard input occurred. */
    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;
    /** Emitted when the value has changed. */
    ionChange: EventEmitter<CustomEvent<IInputInputChangeEventDetail>>;
    /** Emitted when the input loses focus. */
    ionBlur: EventEmitter<CustomEvent<FocusEvent>>;
    /** Emitted when the input has focus. */
    ionFocus: EventEmitter<CustomEvent<FocusEvent>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItem extends Components.IonItem {
}
export declare class IonItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItemDivider extends Components.IonItemDivider {
}
export declare class IonItemDivider {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItemGroup extends Components.IonItemGroup {
}
export declare class IonItemGroup {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItemOption extends Components.IonItemOption {
}
export declare class IonItemOption {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItemOptions extends Components.IonItemOptions {
}
export declare class IonItemOptions {
    protected z: NgZone;
    /** Emitted when the item has been fully swiped. */
    ionSwipe: EventEmitter<CustomEvent<any>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonItemSliding extends Components.IonItemSliding {
}
export declare class IonItemSliding {
    protected z: NgZone;
    /** Emitted when the sliding position changes. */
    ionDrag: EventEmitter<CustomEvent<any>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonLabel extends Components.IonLabel {
}
export declare class IonLabel {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonList extends Components.IonList {
}
export declare class IonList {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonListHeader extends Components.IonListHeader {
}
export declare class IonListHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonMenu extends Components.IonMenu {
}
export declare class IonMenu {
    protected z: NgZone;
    /** Emitted when the menu is about to be opened. */
    ionWillOpen: EventEmitter<CustomEvent<void>>;
    /** Emitted when the menu is about to be closed. */
    ionWillClose: EventEmitter<CustomEvent<void>>;
    /** Emitted when the menu is open. */
    ionDidOpen: EventEmitter<CustomEvent<void>>;
    /** Emitted when the menu is closed. */
    ionDidClose: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonMenuButton extends Components.IonMenuButton {
}
export declare class IonMenuButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonMenuToggle extends Components.IonMenuToggle {
}
export declare class IonMenuToggle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonNav extends Components.IonNav {
}
export declare class IonNav {
    protected z: NgZone;
    /** Event fired when the nav will change components */
    ionNavWillChange: EventEmitter<CustomEvent<void>>;
    /** Event fired when the nav has changed components */
    ionNavDidChange: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonNavLink extends Components.IonNavLink {
}
export declare class IonNavLink {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonNote extends Components.IonNote {
}
export declare class IonNote {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonProgressBar extends Components.IonProgressBar {
}
export declare class IonProgressBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonRadio extends Components.IonRadio {
}
export declare class IonRadio {
    protected z: NgZone;
    /** Emitted when the radio button has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the radio button loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { RadioGroupChangeEventDetail as IRadioGroupRadioGroupChangeEventDetail } from '@ionic/core';
export declare interface IonRadioGroup extends Components.IonRadioGroup {
}
export declare class IonRadioGroup {
    protected z: NgZone;
    /** Emitted when the value has changed. */
    ionChange: EventEmitter<CustomEvent<IRadioGroupRadioGroupChangeEventDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { RangeChangeEventDetail as IRangeRangeChangeEventDetail } from '@ionic/core';
export declare interface IonRange extends Components.IonRange {
}
export declare class IonRange {
    protected z: NgZone;
    /** Emitted when the value property has changed. */
    ionChange: EventEmitter<CustomEvent<IRangeRangeChangeEventDetail>>;
    /** Emitted when the range has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the range loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { RefresherEventDetail as IRefresherRefresherEventDetail } from '@ionic/core';
export declare interface IonRefresher extends Components.IonRefresher {
}
export declare class IonRefresher {
    protected z: NgZone;
    /** Emitted when the user lets go of the content and has pulled down
  further than the `pullMin` or pulls the content down and exceeds the pullMax.
  Updates the refresher state to `refreshing`. The `complete()` method should be
  called when the async operation has completed. */
    ionRefresh: EventEmitter<CustomEvent<IRefresherRefresherEventDetail>>;
    /** Emitted while the user is pulling down the content and exposing the refresher. */
    ionPull: EventEmitter<CustomEvent<void>>;
    /** Emitted when the user begins to start pulling down. */
    ionStart: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonRefresherContent extends Components.IonRefresherContent {
}
export declare class IonRefresherContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonReorder extends Components.IonReorder {
}
export declare class IonReorder {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { ItemReorderEventDetail as IReorderGroupItemReorderEventDetail } from '@ionic/core';
export declare interface IonReorderGroup extends Components.IonReorderGroup {
}
export declare class IonReorderGroup {
    protected z: NgZone;
    /** Event that needs to be listened to in order to complete the reorder action.
  Once the event has been emitted, the `complete()` method then needs
  to be called in order to finalize the reorder action. */
    ionItemReorder: EventEmitter<CustomEvent<IReorderGroupItemReorderEventDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonRippleEffect extends Components.IonRippleEffect {
}
export declare class IonRippleEffect {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonRow extends Components.IonRow {
}
export declare class IonRow {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { SearchbarChangeEventDetail as ISearchbarSearchbarChangeEventDetail } from '@ionic/core';
export declare interface IonSearchbar extends Components.IonSearchbar {
}
export declare class IonSearchbar {
    protected z: NgZone;
    /** Emitted when a keyboard input occurred. */
    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;
    /** Emitted when the value has changed. */
    ionChange: EventEmitter<CustomEvent<ISearchbarSearchbarChangeEventDetail>>;
    /** Emitted when the cancel button is clicked. */
    ionCancel: EventEmitter<CustomEvent<void>>;
    /** Emitted when the clear input button is clicked. */
    ionClear: EventEmitter<CustomEvent<void>>;
    /** Emitted when the input loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    /** Emitted when the input has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { SegmentChangeEventDetail as ISegmentSegmentChangeEventDetail } from '@ionic/core';
export declare interface IonSegment extends Components.IonSegment {
}
export declare class IonSegment {
    protected z: NgZone;
    /** Emitted when the value property has changed and any
  dragging pointer has been released from `ion-segment`. */
    ionChange: EventEmitter<CustomEvent<ISegmentSegmentChangeEventDetail>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSegmentButton extends Components.IonSegmentButton {
}
export declare class IonSegmentButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { SelectChangeEventDetail as ISelectSelectChangeEventDetail } from '@ionic/core';
export declare interface IonSelect extends Components.IonSelect {
}
export declare class IonSelect {
    protected z: NgZone;
    /** Emitted when the value has changed. */
    ionChange: EventEmitter<CustomEvent<ISelectSelectChangeEventDetail>>;
    /** Emitted when the selection is cancelled. */
    ionCancel: EventEmitter<CustomEvent<void>>;
    /** Emitted when the select has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the select loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSelectOption extends Components.IonSelectOption {
}
export declare class IonSelectOption {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSkeletonText extends Components.IonSkeletonText {
}
export declare class IonSkeletonText {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSlide extends Components.IonSlide {
}
export declare class IonSlide {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSlides extends Components.IonSlides {
}
export declare class IonSlides {
    protected z: NgZone;
    /** Emitted after Swiper initialization */
    ionSlidesDidLoad: EventEmitter<CustomEvent<void>>;
    /** Emitted when the user taps/clicks on the slide's container. */
    ionSlideTap: EventEmitter<CustomEvent<void>>;
    /** Emitted when the user double taps on the slide's container. */
    ionSlideDoubleTap: EventEmitter<CustomEvent<void>>;
    /** Emitted before the active slide has changed. */
    ionSlideWillChange: EventEmitter<CustomEvent<void>>;
    /** Emitted after the active slide has changed. */
    ionSlideDidChange: EventEmitter<CustomEvent<void>>;
    /** Emitted when the next slide has started. */
    ionSlideNextStart: EventEmitter<CustomEvent<void>>;
    /** Emitted when the previous slide has started. */
    ionSlidePrevStart: EventEmitter<CustomEvent<void>>;
    /** Emitted when the next slide has ended. */
    ionSlideNextEnd: EventEmitter<CustomEvent<void>>;
    /** Emitted when the previous slide has ended. */
    ionSlidePrevEnd: EventEmitter<CustomEvent<void>>;
    /** Emitted when the slide transition has started. */
    ionSlideTransitionStart: EventEmitter<CustomEvent<void>>;
    /** Emitted when the slide transition has ended. */
    ionSlideTransitionEnd: EventEmitter<CustomEvent<void>>;
    /** Emitted when the slider is actively being moved. */
    ionSlideDrag: EventEmitter<CustomEvent<void>>;
    /** Emitted when the slider is at its initial position. */
    ionSlideReachStart: EventEmitter<CustomEvent<void>>;
    /** Emitted when the slider is at the last slide. */
    ionSlideReachEnd: EventEmitter<CustomEvent<void>>;
    /** Emitted when the user first touches the slider. */
    ionSlideTouchStart: EventEmitter<CustomEvent<void>>;
    /** Emitted when the user releases the touch. */
    ionSlideTouchEnd: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSpinner extends Components.IonSpinner {
}
export declare class IonSpinner {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonSplitPane extends Components.IonSplitPane {
}
export declare class IonSplitPane {
    protected z: NgZone;
    /** Expression to be called when the split-pane visibility has changed */
    ionSplitPaneVisible: EventEmitter<CustomEvent<{
        visible: boolean;
    }>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonTabBar extends Components.IonTabBar {
}
export declare class IonTabBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonTabButton extends Components.IonTabButton {
}
export declare class IonTabButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonText extends Components.IonText {
}
export declare class IonText {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { TextareaChangeEventDetail as ITextareaTextareaChangeEventDetail } from '@ionic/core';
export declare interface IonTextarea extends Components.IonTextarea {
}
export declare class IonTextarea {
    protected z: NgZone;
    /** Emitted when the input value has changed. */
    ionChange: EventEmitter<CustomEvent<ITextareaTextareaChangeEventDetail>>;
    /** Emitted when a keyboard input occurred. */
    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;
    /** Emitted when the input loses focus. */
    ionBlur: EventEmitter<CustomEvent<FocusEvent>>;
    /** Emitted when the input has focus. */
    ionFocus: EventEmitter<CustomEvent<FocusEvent>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonThumbnail extends Components.IonThumbnail {
}
export declare class IonThumbnail {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonTitle extends Components.IonTitle {
}
export declare class IonTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
import { ToggleChangeEventDetail as IToggleToggleChangeEventDetail } from '@ionic/core';
export declare interface IonToggle extends Components.IonToggle {
}
export declare class IonToggle {
    protected z: NgZone;
    /** Emitted when the value property has changed. */
    ionChange: EventEmitter<CustomEvent<IToggleToggleChangeEventDetail>>;
    /** Emitted when the toggle has focus. */
    ionFocus: EventEmitter<CustomEvent<void>>;
    /** Emitted when the toggle loses focus. */
    ionBlur: EventEmitter<CustomEvent<void>>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
export declare interface IonToolbar extends Components.IonToolbar {
}
export declare class IonToolbar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
}
