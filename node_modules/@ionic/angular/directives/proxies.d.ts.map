{"version":3,"file":"proxies.d.ts","sources":["proxies.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport { Components } from '@ionic/core';\nexport declare interface IonAccordion extends Components.IonAccordion {\n}\nexport declare class IonAccordion {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { AccordionGroupChangeEventDetail as IAccordionGroupAccordionGroupChangeEventDetail } from '@ionic/core';\nexport declare interface IonAccordionGroup extends Components.IonAccordionGroup {\n}\nexport declare class IonAccordionGroup {\n    protected z: NgZone;\n    /** Emitted when the value property has changed. */\n    ionChange: EventEmitter<CustomEvent<IAccordionGroupAccordionGroupChangeEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonApp extends Components.IonApp {\n}\nexport declare class IonApp {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonAvatar extends Components.IonAvatar {\n}\nexport declare class IonAvatar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonBackButton extends Components.IonBackButton {\n}\nexport declare class IonBackButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonBackdrop extends Components.IonBackdrop {\n}\nexport declare class IonBackdrop {\n    protected z: NgZone;\n    /** Emitted when the backdrop is tapped. */\n    ionBackdropTap: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonBadge extends Components.IonBadge {\n}\nexport declare class IonBadge {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonBreadcrumb extends Components.IonBreadcrumb {\n}\nexport declare class IonBreadcrumb {\n    protected z: NgZone;\n    /** Emitted when the breadcrumb has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the breadcrumb loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { BreadcrumbCollapsedClickEventDetail as IBreadcrumbsBreadcrumbCollapsedClickEventDetail } from '@ionic/core';\nexport declare interface IonBreadcrumbs extends Components.IonBreadcrumbs {\n}\nexport declare class IonBreadcrumbs {\n    protected z: NgZone;\n    /** Emitted when the collapsed indicator is clicked on. */\n    ionCollapsedClick: EventEmitter<CustomEvent<IBreadcrumbsBreadcrumbCollapsedClickEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonButton extends Components.IonButton {\n}\nexport declare class IonButton {\n    protected z: NgZone;\n    /** Emitted when the button has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the button loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonButtons extends Components.IonButtons {\n}\nexport declare class IonButtons {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCard extends Components.IonCard {\n}\nexport declare class IonCard {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCardContent extends Components.IonCardContent {\n}\nexport declare class IonCardContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCardHeader extends Components.IonCardHeader {\n}\nexport declare class IonCardHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCardSubtitle extends Components.IonCardSubtitle {\n}\nexport declare class IonCardSubtitle {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCardTitle extends Components.IonCardTitle {\n}\nexport declare class IonCardTitle {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { CheckboxChangeEventDetail as ICheckboxCheckboxChangeEventDetail } from '@ionic/core';\nexport declare interface IonCheckbox extends Components.IonCheckbox {\n}\nexport declare class IonCheckbox {\n    protected z: NgZone;\n    /** Emitted when the checked property has changed. */\n    ionChange: EventEmitter<CustomEvent<ICheckboxCheckboxChangeEventDetail>>;\n    /** Emitted when the checkbox has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the checkbox loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonChip extends Components.IonChip {\n}\nexport declare class IonChip {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonCol extends Components.IonCol {\n}\nexport declare class IonCol {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { ScrollBaseDetail as IContentScrollBaseDetail } from '@ionic/core';\nimport { ScrollDetail as IContentScrollDetail } from '@ionic/core';\nexport declare interface IonContent extends Components.IonContent {\n}\nexport declare class IonContent {\n    protected z: NgZone;\n    /** Emitted when the scroll has started. */\n    ionScrollStart: EventEmitter<CustomEvent<IContentScrollBaseDetail>>;\n    /** Emitted while scrolling. This event is disabled by default.\n  Look at the property: `scrollEvents` */\n    ionScroll: EventEmitter<CustomEvent<IContentScrollDetail>>;\n    /** Emitted when the scroll has ended. */\n    ionScrollEnd: EventEmitter<CustomEvent<IContentScrollBaseDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { DatetimeChangeEventDetail as IDatetimeDatetimeChangeEventDetail } from '@ionic/core';\nexport declare interface IonDatetime extends Components.IonDatetime {\n}\nexport declare class IonDatetime {\n    protected z: NgZone;\n    /** Emitted when the datetime selection was cancelled. */\n    ionCancel: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the value (selected date) has changed. */\n    ionChange: EventEmitter<CustomEvent<IDatetimeDatetimeChangeEventDetail>>;\n    /** Emitted when the datetime has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the datetime loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonFab extends Components.IonFab {\n}\nexport declare class IonFab {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonFabButton extends Components.IonFabButton {\n}\nexport declare class IonFabButton {\n    protected z: NgZone;\n    /** Emitted when the button has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the button loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonFabList extends Components.IonFabList {\n}\nexport declare class IonFabList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonFooter extends Components.IonFooter {\n}\nexport declare class IonFooter {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonGrid extends Components.IonGrid {\n}\nexport declare class IonGrid {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonHeader extends Components.IonHeader {\n}\nexport declare class IonHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonIcon extends Components.IonIcon {\n}\nexport declare class IonIcon {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonImg extends Components.IonImg {\n}\nexport declare class IonImg {\n    protected z: NgZone;\n    /** Emitted when the img src has been set */\n    ionImgWillLoad: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the image has finished loading */\n    ionImgDidLoad: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the img fails to load */\n    ionError: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonInfiniteScroll extends Components.IonInfiniteScroll {\n}\nexport declare class IonInfiniteScroll {\n    protected z: NgZone;\n    /** Emitted when the scroll reaches\n  the threshold distance. From within your infinite handler,\n  you must call the infinite scroll's `complete()` method when\n  your async operation has completed. */\n    ionInfinite: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonInfiniteScrollContent extends Components.IonInfiniteScrollContent {\n}\nexport declare class IonInfiniteScrollContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { InputChangeEventDetail as IInputInputChangeEventDetail } from '@ionic/core';\nexport declare interface IonInput extends Components.IonInput {\n}\nexport declare class IonInput {\n    protected z: NgZone;\n    /** Emitted when a keyboard input occurred. */\n    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;\n    /** Emitted when the value has changed. */\n    ionChange: EventEmitter<CustomEvent<IInputInputChangeEventDetail>>;\n    /** Emitted when the input loses focus. */\n    ionBlur: EventEmitter<CustomEvent<FocusEvent>>;\n    /** Emitted when the input has focus. */\n    ionFocus: EventEmitter<CustomEvent<FocusEvent>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItem extends Components.IonItem {\n}\nexport declare class IonItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItemDivider extends Components.IonItemDivider {\n}\nexport declare class IonItemDivider {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItemGroup extends Components.IonItemGroup {\n}\nexport declare class IonItemGroup {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItemOption extends Components.IonItemOption {\n}\nexport declare class IonItemOption {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItemOptions extends Components.IonItemOptions {\n}\nexport declare class IonItemOptions {\n    protected z: NgZone;\n    /** Emitted when the item has been fully swiped. */\n    ionSwipe: EventEmitter<CustomEvent<any>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonItemSliding extends Components.IonItemSliding {\n}\nexport declare class IonItemSliding {\n    protected z: NgZone;\n    /** Emitted when the sliding position changes. */\n    ionDrag: EventEmitter<CustomEvent<any>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonLabel extends Components.IonLabel {\n}\nexport declare class IonLabel {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonList extends Components.IonList {\n}\nexport declare class IonList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonListHeader extends Components.IonListHeader {\n}\nexport declare class IonListHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonMenu extends Components.IonMenu {\n}\nexport declare class IonMenu {\n    protected z: NgZone;\n    /** Emitted when the menu is about to be opened. */\n    ionWillOpen: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the menu is about to be closed. */\n    ionWillClose: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the menu is open. */\n    ionDidOpen: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the menu is closed. */\n    ionDidClose: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonMenuButton extends Components.IonMenuButton {\n}\nexport declare class IonMenuButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonMenuToggle extends Components.IonMenuToggle {\n}\nexport declare class IonMenuToggle {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonNav extends Components.IonNav {\n}\nexport declare class IonNav {\n    protected z: NgZone;\n    /** Event fired when the nav will change components */\n    ionNavWillChange: EventEmitter<CustomEvent<void>>;\n    /** Event fired when the nav has changed components */\n    ionNavDidChange: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonNavLink extends Components.IonNavLink {\n}\nexport declare class IonNavLink {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonNote extends Components.IonNote {\n}\nexport declare class IonNote {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonProgressBar extends Components.IonProgressBar {\n}\nexport declare class IonProgressBar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonRadio extends Components.IonRadio {\n}\nexport declare class IonRadio {\n    protected z: NgZone;\n    /** Emitted when the radio button has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the radio button loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { RadioGroupChangeEventDetail as IRadioGroupRadioGroupChangeEventDetail } from '@ionic/core';\nexport declare interface IonRadioGroup extends Components.IonRadioGroup {\n}\nexport declare class IonRadioGroup {\n    protected z: NgZone;\n    /** Emitted when the value has changed. */\n    ionChange: EventEmitter<CustomEvent<IRadioGroupRadioGroupChangeEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { RangeChangeEventDetail as IRangeRangeChangeEventDetail } from '@ionic/core';\nexport declare interface IonRange extends Components.IonRange {\n}\nexport declare class IonRange {\n    protected z: NgZone;\n    /** Emitted when the value property has changed. */\n    ionChange: EventEmitter<CustomEvent<IRangeRangeChangeEventDetail>>;\n    /** Emitted when the range has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the range loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { RefresherEventDetail as IRefresherRefresherEventDetail } from '@ionic/core';\nexport declare interface IonRefresher extends Components.IonRefresher {\n}\nexport declare class IonRefresher {\n    protected z: NgZone;\n    /** Emitted when the user lets go of the content and has pulled down\n  further than the `pullMin` or pulls the content down and exceeds the pullMax.\n  Updates the refresher state to `refreshing`. The `complete()` method should be\n  called when the async operation has completed. */\n    ionRefresh: EventEmitter<CustomEvent<IRefresherRefresherEventDetail>>;\n    /** Emitted while the user is pulling down the content and exposing the refresher. */\n    ionPull: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the user begins to start pulling down. */\n    ionStart: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonRefresherContent extends Components.IonRefresherContent {\n}\nexport declare class IonRefresherContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonReorder extends Components.IonReorder {\n}\nexport declare class IonReorder {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { ItemReorderEventDetail as IReorderGroupItemReorderEventDetail } from '@ionic/core';\nexport declare interface IonReorderGroup extends Components.IonReorderGroup {\n}\nexport declare class IonReorderGroup {\n    protected z: NgZone;\n    /** Event that needs to be listened to in order to complete the reorder action.\n  Once the event has been emitted, the `complete()` method then needs\n  to be called in order to finalize the reorder action. */\n    ionItemReorder: EventEmitter<CustomEvent<IReorderGroupItemReorderEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonRippleEffect extends Components.IonRippleEffect {\n}\nexport declare class IonRippleEffect {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonRow extends Components.IonRow {\n}\nexport declare class IonRow {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SearchbarChangeEventDetail as ISearchbarSearchbarChangeEventDetail } from '@ionic/core';\nexport declare interface IonSearchbar extends Components.IonSearchbar {\n}\nexport declare class IonSearchbar {\n    protected z: NgZone;\n    /** Emitted when a keyboard input occurred. */\n    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;\n    /** Emitted when the value has changed. */\n    ionChange: EventEmitter<CustomEvent<ISearchbarSearchbarChangeEventDetail>>;\n    /** Emitted when the cancel button is clicked. */\n    ionCancel: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the clear input button is clicked. */\n    ionClear: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the input loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the input has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SegmentChangeEventDetail as ISegmentSegmentChangeEventDetail } from '@ionic/core';\nexport declare interface IonSegment extends Components.IonSegment {\n}\nexport declare class IonSegment {\n    protected z: NgZone;\n    /** Emitted when the value property has changed and any\n  dragging pointer has been released from `ion-segment`. */\n    ionChange: EventEmitter<CustomEvent<ISegmentSegmentChangeEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSegmentButton extends Components.IonSegmentButton {\n}\nexport declare class IonSegmentButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SelectChangeEventDetail as ISelectSelectChangeEventDetail } from '@ionic/core';\nexport declare interface IonSelect extends Components.IonSelect {\n}\nexport declare class IonSelect {\n    protected z: NgZone;\n    /** Emitted when the value has changed. */\n    ionChange: EventEmitter<CustomEvent<ISelectSelectChangeEventDetail>>;\n    /** Emitted when the selection is cancelled. */\n    ionCancel: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the select has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the select loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSelectOption extends Components.IonSelectOption {\n}\nexport declare class IonSelectOption {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSkeletonText extends Components.IonSkeletonText {\n}\nexport declare class IonSkeletonText {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSlide extends Components.IonSlide {\n}\nexport declare class IonSlide {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSlides extends Components.IonSlides {\n}\nexport declare class IonSlides {\n    protected z: NgZone;\n    /** Emitted after Swiper initialization */\n    ionSlidesDidLoad: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the user taps/clicks on the slide's container. */\n    ionSlideTap: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the user double taps on the slide's container. */\n    ionSlideDoubleTap: EventEmitter<CustomEvent<void>>;\n    /** Emitted before the active slide has changed. */\n    ionSlideWillChange: EventEmitter<CustomEvent<void>>;\n    /** Emitted after the active slide has changed. */\n    ionSlideDidChange: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the next slide has started. */\n    ionSlideNextStart: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the previous slide has started. */\n    ionSlidePrevStart: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the next slide has ended. */\n    ionSlideNextEnd: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the previous slide has ended. */\n    ionSlidePrevEnd: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the slide transition has started. */\n    ionSlideTransitionStart: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the slide transition has ended. */\n    ionSlideTransitionEnd: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the slider is actively being moved. */\n    ionSlideDrag: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the slider is at its initial position. */\n    ionSlideReachStart: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the slider is at the last slide. */\n    ionSlideReachEnd: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the user first touches the slider. */\n    ionSlideTouchStart: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the user releases the touch. */\n    ionSlideTouchEnd: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSpinner extends Components.IonSpinner {\n}\nexport declare class IonSpinner {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonSplitPane extends Components.IonSplitPane {\n}\nexport declare class IonSplitPane {\n    protected z: NgZone;\n    /** Expression to be called when the split-pane visibility has changed */\n    ionSplitPaneVisible: EventEmitter<CustomEvent<{\n        visible: boolean;\n    }>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonTabBar extends Components.IonTabBar {\n}\nexport declare class IonTabBar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonTabButton extends Components.IonTabButton {\n}\nexport declare class IonTabButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonText extends Components.IonText {\n}\nexport declare class IonText {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { TextareaChangeEventDetail as ITextareaTextareaChangeEventDetail } from '@ionic/core';\nexport declare interface IonTextarea extends Components.IonTextarea {\n}\nexport declare class IonTextarea {\n    protected z: NgZone;\n    /** Emitted when the input value has changed. */\n    ionChange: EventEmitter<CustomEvent<ITextareaTextareaChangeEventDetail>>;\n    /** Emitted when a keyboard input occurred. */\n    ionInput: EventEmitter<CustomEvent<KeyboardEvent>>;\n    /** Emitted when the input loses focus. */\n    ionBlur: EventEmitter<CustomEvent<FocusEvent>>;\n    /** Emitted when the input has focus. */\n    ionFocus: EventEmitter<CustomEvent<FocusEvent>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonThumbnail extends Components.IonThumbnail {\n}\nexport declare class IonThumbnail {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonTitle extends Components.IonTitle {\n}\nexport declare class IonTitle {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { ToggleChangeEventDetail as IToggleToggleChangeEventDetail } from '@ionic/core';\nexport declare interface IonToggle extends Components.IonToggle {\n}\nexport declare class IonToggle {\n    protected z: NgZone;\n    /** Emitted when the value property has changed. */\n    ionChange: EventEmitter<CustomEvent<IToggleToggleChangeEventDetail>>;\n    /** Emitted when the toggle has focus. */\n    ionFocus: EventEmitter<CustomEvent<void>>;\n    /** Emitted when the toggle loses focus. */\n    ionBlur: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface IonToolbar extends Components.IonToolbar {\n}\nexport declare class IonToolbar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\n"]}